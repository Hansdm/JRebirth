<!DOCTYPE document [
  <!-- These are the entity sets for ISO Latin 1 characters for the XHTML -->
  <!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
  %HTMLlat1;
  <!-- These are the entity sets for special characters for the XHTML -->
  <!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">
  %HTMLsymbol;
  <!-- These are the entity sets for symbol characters for the XHTML -->
  <!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
  %HTMLspecial;
]>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Thread</title>
	</properties>

	<head>
		<title></title>
		<link rel="stylesheet" type="text/css" href="../css/shCoreEclipse.css" media="all" />
	</head>

	<body>

		<section name="Thread Management" title="Thread Management">

			<div id="catcherTitle">Thread Management</div>
			<div id="catcherContent">Writing concurrent application could be painful ! Not with JRebirth</div>

			<!-- <macro name="toc" section="4" fromDepth="2" toDepth="3" /> -->

			<subsection name="Threading overview">
				<p>JRebirth is multi-threaded, not only by using Task Worker
					provided by JavaFX APIs. JRebirth has got its own Thread to manage
					local events (called
					waves) allowing components to communicate with each others.
					It also allows to manage multiple threads in a very simple manner with its included
					thread pool.
				</p>
				<p>Thus all inner JRebirth tasks are processed into a custom
					thread and don't infer with the JavaFX Application Thread which have to
					manage user
					events and some UI instantiation.
				</p>
				<p>
					Lags, UI Freeze ... are lost to history :D
				</p>
				<p>What happens when you debug a JRebirth application ? You can observe a lot
					of threads, but don't be scared !! Everything is at the right
					isolated place doing the right thing.
				</p>
				<p>The most important are :</p>
				<ul>
					<li>JavaFX Application Thread - JAT</li>
					<li>JRebirth Internal Thread - JIT</li>
					<li>JRebirth Slot x (n threads available in JRebirth Thread
						Pool - JTP Slot 'n')
					</li>
				</ul>
				<p>Other threads are related to JavaFX platform, JRebirth only
					creates 2 to 5 threads (by default) that can be extended if required.
				</p>
				<div class="uml">
					<a href="uml/Concurrent.png" rel="lightbox" title="Thread Class Diagram">
						<img class="redux" src="uml/Concurrent.png" alt="" />
					</a>
					<legend>Concurrent Class Diagram</legend>
				</div>
			</subsection>

			<subsection name="Thread Rules">
				<p>
					JavaFX toolkit requires that all UI tasks must be done into the JAT, but it also allows
					<strong>to build a view into the JIT or JTP and then link it to your scene
						into the JAT.
					</strong>
				</p>
				<p>All Wave processing tasks are automatically done into the JIT.</p>
				<p>When the JRebirth Framework needs to update UI (thanks to <strong>Model</strong> layer), it's done
					automatically done into the JAT. No matters to have !
				</p>
				<p>
					But when you call a component directly (synchronous method:
					<em>getCommand,
						getService, getModel
					</em>
					), your call is processed into the current thread, so you must pay attention to what you are doing.
				</p>
				
				<h4>Launch a runnable into JAT</h4>
				<macro name="include">
					<param name="source" value="core/src/main/java/org/jrebirth/core/facade/WaveReady.java" />
					<param name="snippet" value="re:callCommand" />
				</macro>
				
				<h4>Launch a runnable into JIT</h4>
				<macro name="include">
					<param name="source" value="core/src/main/java/org/jrebirth/core/facade/WaveReady.java" />
					<param name="snippet" value="re:callCommand" />
				</macro>
				
				<h4>Launch a runnable into JTP</h4>
				<macro name="include">
					<param name="source" value="core/src/main/java/org/jrebirth/core/facade/WaveReady.java" />
					<param name="snippet" value="re:callCommand" />
				</macro>
				
				
				</subsection>
				
				<subsection name="Examples">

				<p>
					<span style="text-decoration: underline;">If you
						are into the JIT:
					</span>
				</p>
				<ul>
					<li>getCommand
						=&gt; the code will be processed
						synchronously into the JIT, but if you call the
						<em>run</em>
						method of the command it will be run into the thread defined by the command configuration.
					</li>
					<li>getModel =&gt; all called methods of the model will be
						processed into the JIT ==&gt; Can Break !!! Toolkit will raise an error.</li>
				</ul>
				<p>
					When you are into the JIT you must use
					<strong>JRebirth.runIntoJAT</strong>
					that call internally
					<em>Platform.runLater</em>
					to perform UI updates.
				</p>
				<p>
					JRebirth Framework offers some default commands to
					do the trick (
					<em>DefaultUiCommand</em>
					). Moreover if you
					send a
					<em>Wave</em>
					with a
					<em>WaveType</em>
					listened by a model, it will be automatically processed into the JAT (Cool JRebirth Magic).
				</p>
				<p>
					<span style="text-decoration: underline;">If you
						are into the JAT:
					</span>
				</p>
				<ul>
					<li>getCommand, getService =&gt; this code will be processed into the JAT
						: Don't perform long task or you will freeze the application !!!
					</li>
					<li>getModel =&gt; actions will be done into the JAT
						==&gt; OK for short UI actions</li>
				</ul>
				<p>
					When you are in the JAT you must use
					<strong>JRebirth.runIntoJIT</strong>
					that call internally
					<em>JRebirthThread.runLater</em>
					to run tasks into the core thread.
				</p>
				<p>
					JRebirth Framework offers some
					default commands to force to run into JIT &amp; JTP (
					<em>DefaultCommand</em>
					and
					<em>DefaultPoolCommand</em>
					). You can also send a wave
					that will trigger a command, or call a service into another thread that
					JAT.
				</p>
				<p>
					<em>For example:</em>
				</p>
				<p>If you want to call a service which make an asynchronous call
					to a remote server. You can use the getService method to initiate the
					call (By
					default this call will be managed into JRebirth
					Thread Pool :
					JTP), but the return must be managed into the JAT:
				</p>
				<ul>
					<li>Either use a wave to send data received from remote server,
						default service will generate a such wave (automatically processed into
						the JAT for
						models that listen it)
					</li>
					<li>Either call the model from the JAT and access to service
						results (the first way way is the best to use)
					</li>
				</ul>
			</subsection>


			<div class="bottomLinks">
				<div class="previousDocPage">
					<a href="Application.html">Create your first Application</a>
				</div>
				<div class="nextDocPage">
					<a href="Logging.html">Configure Logging System</a>
				</div>
				<div class="tocDocPage">
					<a href="index.html">TOC</a>
				</div>
			</div>
		</section>
	</body>
</document> 	