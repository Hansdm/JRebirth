<!DOCTYPE document [
  <!-- These are the entity sets for ISO Latin 1 characters for the XHTML -->
  <!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
  %HTMLlat1;
  <!-- These are the entity sets for special characters for the XHTML -->
  <!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">
  %HTMLsymbol;
  <!-- These are the entity sets for symbol characters for the XHTML -->
  <!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
  %HTMLspecial;
]>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

	<properties>
		<title>Thread</title>
	</properties>

	<body>

		<section name="Thread Management" title="Thread Management">
			<macro name="toc" section="4" fromDepth="2" toDepth="3" />

			<subsection name="Threading overview">
				<p>JRebirth is multi-threaded, not only by using Task Worker
					provided by JavaFX APIs. JRebirth has got its own Thread to manage
					local events (called waves).
				</p>
				<p>Thus all inner JRebirth tasks are processed into a custom
					thread and don't infer with the JavaFX Application Thread which have to
					manage user events and some UI instantiation.
				</p>
				<p>When you debug a JRebirth application, you can observe a lot
					of threads, Don't be scared !!
				</p>
				<p>The most important are :</p>
				<ul>
					<li>JavaFX Application Thread - JAT</li>
					<li>JRebirth Engine Thread - JIT</li>
					<li>JRebirth Slot x (n threads available in JRebirth Thread
						Pool - JTP)
					</li>
				</ul>
				<p>Other threads are related to JavaFX platform, JRebirth only
					creates 2-5 threads that can be extended if required.
				</p>
				<p>
					<span style="text-decoration: underline;">UML Class Diagram:</span>
				</p>
				<div class="uml">
					<a href="uml/Concurrent.png" rel="lightbox" title="Thread Class Diagram">
						<img class="redux" src="uml/Concurrent.png" alt="" />
					</a>
				</div>
			</subsection>

			<subsection name="Thread Rules">
				<p>
					All UI tasks must be done into the JAT, but
					<strong>you
						can build a view into the JIT or JTP but you must add it to your scene
						into the JAT.
					</strong>
				</p>
				<p>All Wave processing tasks are automatically done into the JIT.</p>
				<p>When the JRebirth Framework needs to update UI, it's done
					automatically into the JAT. No matters to have !
				</p>
				<p>But when you call a component directly( getCommand,
					getService, getModel), your call is processed into the current thread.
				</p>
				<p>
				</p>
				<p>
				</p>
				<p>Pay attention to the thread into you are before calling
					synchronous methods getCommand, get getModel, getService.
				</p>
				<p>
					<span style="text-decoration: underline;">If you
						are into the JIT:
					</span>
				</p>
				<ul>
					<li>getCommand =&gt; the command will be processed
						synchronously into the JIT
					</li>
					<li>getModel =&gt; all called methods of the model will be
						processed into the JIT ==&gt; Can Break !!!</li>
				</ul>
				<p>
					When you are into the JIT you must use Platform.runLater to
					perform UI updates. JRebirth Framework offers some default commands to
					do the trick (
					<em>DefaultUiCommand</em>
					). Moreovere if you
					send a
					<em>Wave</em>
					with a
					<em>WaveType</em>
					listend by a model, it will be automatically processed into the JAT.
				</p>
				<p>
					<span style="text-decoration: underline;">If you
						are into the JAT:
					</span>
				</p>
				<ul>
					<li>getCommand =&gt; future task will be done into the JAT
						: Don't perform long task or you will freeze the application !!!
					</li>
					<li>getModel =&gt; actions will be done into the JAT
						==&gt; OK for short Ui actions</li>
				</ul>
				<p>
					When you are in the JAT you must use JRebirthThread.runLater
					to run tasks into the core thread. JRebirth Framework offers some
					default commands to force to run into the JIT (
					<em>DefaultCommand</em>
					or
					<em>DefaultPoolCOmmand</em>
					). You can also send a wave
					that will trigger a command, or call a service into another thread that
					JAT.
				</p>
				<p>
					<em>For example:</em>
				</p>
				<p>If you want to call a service which make an asynchronuous call
					to a remote server. You can use the getService method to initiate the
					call (By default this call will be managed into JRebirth
					Thread Pool :
					JTP), but the return must be managed into the JAT:
				</p>
				<ul>
					<li>Either use a wave to send data received from remote server,
						default service will generate a such wave (automatically processed into
						the JAT for models taht listen it)
					</li>
					<li>Either call the model from the JAT and access to service
						results (the first way way is the best to use)
					</li>
				</ul>
			</subsection>


			<div class="bottomLinks">
				<div class="previousDocPage">
					<a href="Application.html">Previous - Create your first Application</a>
				</div>
				<div class="nextDocPage">
					<a href="Logging.html">Next - Configure Logging System</a>
				</div>
				<div class="tocDocPage">
					<a href="index.html">TOC</a>
				</div>
			</div>
		</section>
	</body>
</document> 	