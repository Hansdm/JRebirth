<!DOCTYPE document [
  <!-- These are the entity sets for ISO Latin 1 characters for the XHTML -->
  <!ENTITY % HTMLlat1 PUBLIC "-//W3C//ENTITIES Latin 1 for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-lat1.ent">
  %HTMLlat1;
  <!-- These are the entity sets for special characters for the XHTML -->
  <!ENTITY % HTMLsymbol PUBLIC "-//W3C//ENTITIES Symbols for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-symbol.ent">
  %HTMLsymbol;
  <!-- These are the entity sets for symbol characters for the XHTML -->
  <!ENTITY % HTMLspecial PUBLIC "-//W3C//ENTITIES Special for XHTML//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml-special.ent">
  %HTMLspecial;
]>
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
	<body>

<section name="Overview" title="Overview">
  <macro name="toc" section="0" fromDepth="1" toDepth="3" />

<subsection name="ItWorksAs" title="How does JRebirth work ?">

<p>JRebirth uses a WCS-MVC pattern with 6 main layers:</p>
<br />
<div style="text-align: center;">
<img src="images/JRebirth_WCS_MVC.png" alt="" />
</div>

<div class="uml">
	<a title="JRebirth Overview" rel="lightbox" href="uml/JRebirth_WCS_MVC.png">
		<img class="redux" alt="" src="uml/JRebirth_WCS_MVC.png" />
	</a>
</div>

</subsection>

<subsection name="Application" title="Application">
<p>The <span class="high">App</span>lication is the starting class to extends to build a JavaFX 2.0 application that use JRebirth framework.</p>
<p><a href="application">Learn more about Application</a></p>
</subsection>


<subsection name="GlobalFacade" title="GlobalFacade">
<p>The GlobalFacade is just used to simplify acess from any layer to any other.<br /><a href="globalfacade">Learn more about GlobalFacade</a></p>
</subsection>

<subsection name="Notifier" title="Notifier and Wave">
<p>The Notifier layer will transport small notifications called Waves. This notification engine is integrated into the core of JRebirth. Its role is to manage communication throught all JRebirth layers.</p>
<p>Instead of propagating events or notifications we are using Waves. Why Waves ? Because it sounds great.</p>
<p>When I send a wave I feel like a surfer !</p>
<p>A wave can be sent or received by three kinds of components :</p>
<ul>
<li>Command</li>
<li>Service</li>
<li>Model</li>
</ul>
<p>There are a lot of convenient method available to create and launch waves into the application.</p>
<p><a href="notifier">Learn more about Notifier</a></p>
</subsection>

<subsection name="Commands" title="CommandFacade and Commands">
<p>The Command layer is used to manage complex group of actions (MultiCommand) (synchronously or asynchronously), or atomic reusable action (Command).</p>
<p>They can be processed into one of the 3 kind of thread managed by using annotation.</p>
<p>All interactions between layers must be managed by Commands.</p>
<p><a href="commandfacade">Learn more about Commands</a></p>
</subsection>

<subsection name="Services" title="ServiceFacade and Services">
<p>The Service layer is used to retrieve Data from outside the application or to communicate with others applications.</p>
<p>It can use Spring HttpRequests, Web Services, Restlets, files or whatever you want. They are managed as Worker tasks in a dedicated thread pool.</p>
<p><a href="servicefacade">Learn more about Services</a></p>
</subsection>

<subsection name="UI" title="UiFacade and Models">
<p>The Model layer is used to manage the loading of the data displayed into a view, for example by calling a service.</p>
<p>A model manage the View logic.</p>
<p>A Model creates its View automatically by reflection.</p>
<p><a href="uifacade">Learn more about Models</a></p>
</subsection>

<subsection name="Controllers" title="Controllers">
<p>A Controller manage the View's Interactions logic. it's used to intercept all JavaFX components' events.</p>
<p>A controller must implements an custom Adapter to manage events (like MouseAdapter) and link its built-in Handler to the View's nodes (like MouseHandler).</p>
<p>Or it can simply implement custom methods if annotations are used. </p>
</subsection>

<subsection name="Views" title="Views">
<p>The view layer is used to create user interface by using JavaFX visual components.</p>
<p>A View manage the View's Presentation logic.</p>
<p>Each view have a Model used to acessinterrogate to display data.</p>
<p>Each view have a Controller used to manage JavaFX components events.</p>
<p>A view creates its Controller automatically by reflection.</p>
<p>Each JavaFX Node that need to be controlled by a Controller can declare a getter with package visibility to restrict access from other layers.</p>
<p>It can also use an annotation to automatically call a dedicated method into the controller. </p>
</subsection>  
	  
      <div class="bottomLinks">
        <div class="previousDocPage"><a href="Installation.html">Previous - Installation</a></div>
        <div class="nextDocPage"><a href="Application.html">Next - Create your first Application</a></div>
        <div class="tocDocPage"><a href="index.html">TOC</a></div>
      </div>
</section>	  
</body>
</document> 	
